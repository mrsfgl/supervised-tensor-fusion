function [out, fval] = acmtf_fun_admm(X, Z, R, Znormsqr, beta_cp, beta_pca, alpha, eta, theta)
% ACMTF_FUN_ADMM updates a soft coupled ACMTF bjective using ADMM, where 
% the matrix model is a matrix factorization model and the tensor model is 
% a CANDECOMP/PARAFAC (CP) model (with the option  of adding sparsity 
% penalties on the weights of components through the use of parameters 
% beta_cp and beta_pca).
% 
% [out, fval] = acmtf_fun_admm(X, Z, R, Znormsqr, beta_cp, beta_pca, alpha, eta, theta)
%
% Input:   X: a structure with factor matrices of all modalities;
%          Z: a structure with object, modes, size fields storing the
%             coupled data sets (See cmtf_check).
%          R: number of components
%          Znormsqr: a cell array with squared Frobenius norm of each Z.object
%          beta_cp : sparsity parameter on the weights of rank-one tensors
%                    in the CP part of a CMTF model.
%          beta_pca: sparsity parameter on the weights of rank-one matrices
%                    in the PCA part of a CMTF model.
%          
% Output:  f: function value of the combined objective function.
%          g: a vector corresponding to the gradient.
%
% See also ACMTF_OPT, ACMTF_FG, ACMTF_VEC_TO_STRUCT, ACMTF_STRUCT_TO_VEC,
% SCP_FG, SCP_WFG, SPCA_FG, SPCA_WFG, CMTF_CHECK.
%
% This is the MATLAB CMTF Toolbox, 2013.
% References: 
%    - (CMTF) E. Acar, T. G. Kolda, and D. M. Dunlavy, All-at-once Optimization for Coupled
%      Matrix and Tensor Factorizations, KDD Workshop on Mining and Learning
%      with Graphs, 2011 (arXiv:1105.3422v1)
%    - (ACMTF)E. Acar, A. J. Lawaetz, M. A. Rasmussen,and R. Bro, Structure-Revealing Data 
%      Fusion Model with Applications in Metabolomics, IEEE EMBC, pages 6023-6026, 2013.
%    - (ACMTF)E. Acar,  E. E. Papalexakis, G. Gurdeniz, M. Rasmussen, A. J. Lawaetz, M. Nilsson, and R. Bro, 
%      Structure-Revealing Data Fusion, BMC Bioinformatics, 15: 239, 2014.        
%

P = length(Z.object);
sz = Z.size;
modes = cell2mat(Z.modes);
N = length(modes);

[f, out] = admm_loop(Z, X, Znormsqr, alpha, [beta_cp, beta_pca], eta, theta);

end